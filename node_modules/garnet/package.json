{
  "name": "garnet",
  "version": "0.1.9",
  "description": "A fast and minimalistic template engine for node.",
  "main": "garnet.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/boyers/garnet.git"
  },
  "keywords": [
    "template",
    "templating"
  ],
  "author": {
    "name": "Stephan Boyer"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/boyers/garnet/issues"
  },
  "homepage": "https://github.com/boyers/garnet",
  "readme": "Garnet\n======\n\nGarnet is a fast and minimalist template engine for [Node](http://nodejs.org/).\n\nInstallation\n------------\n\n    $ npm install garnet\n\nFeatures\n--------\n\n- Compatible with [Express](http://expressjs.com/)\n- Performant due to precompilation and caching\n- Evaluate JavaScript (e.g., for conditionals and loops): `<% code %>`\n- Evaluate and embed (with sanitization): `<%= code %>`\n- Evaluate and embed (without sanitization): `<%- code %>`\n- Render a template from within a template: `<%- render(path, locals) %>`\n\nAPI\n---\n\n### Compiling and rendering\n\nTo compile a template (or fetch an already-compiled template from cache):\n\n    var template = garnet.compile(path);\n\nTo render a template:\n\n    var output = template(locals);\n\nTo render a template from within another template (and compile it if necessary):\n\n    <%- render(path, locals) %>\n\n### Default template directory\n\nBy default, Garnet looks in `./views` for unqualified template names. If you want to change the default path to `./templates`, for example, use:\n\n    garnet.templateDir = path.join(process.cwd(), 'templates');\n\n### Default template extension\n\nIf you refer to a view without a file extension, Garnet assumes `.garnet` by default. You can change this like so:\n\n    garnet.templateExt = '.html';\n\n### Caching\n\nBy default, Garnet will only load and compile a template once. If you want Garnet to reload and recompile templates whenever they are rendered, you can do so with:\n\n    garnet.enableCaching = false;\n\nThis is useful for development (you don't need to restart the server for every change), but you should leave caching enabled in production.\n\nExamples\n--------\n\n### Using Garnet with Express\n\nTo render a view with Express:\n\n    app.get('/', function(req, res) {\n      res.render('index.garnet');\n    }\n\nIf you want to omit the `.garnet` extension from the line above, you can tell Express to assume it:\n\n    app.set('view engine', 'garnet');\n\nIf you want to use a different file extension (e.g., `.html`) for views, use this:\n\n    app.set('view engine', 'html');       // Tell Express to assume this extension\n    app.engine('html', garnet.__express); // Tell Express to use Garnet for this extension\n    garnet.templateExt = '.html';         // Tell Garnet to assume this extension\n\n### Locals\n\nYou can pass data to a view using the `locals` argument.\n\nFor example, in `app.js`:\n\n    res.render('user.garnet', { name: 'Stephan Boyer' });\n\nIn `views/user.garnet`:\n\n    Name: <%= locals.name %>\n\n### Conditionals\n\n    <% if (user) { %>\n      Name: <%= user.name %>\n    <% } %>\n\n### Loops\n\n    <% users.forEach(function(user) { %>\n      Name: <%= user.name %>\n    <% } %>\n\n### Layouts\n\nWe simply pass the name of the view to the layout as a local:\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Layout Demo</title>\n      </head>\n      <body>\n        <%- render(locals.view, locals) %>\n      </body>\n    </html>\n\nIn Express, you might render a view with this layout as follows:\n\n    app.get('/', function(req, res) {\n      res.render('layout.garnet', { view: 'index.garnet' });\n    });\n",
  "readmeFilename": "README.md",
  "gitHead": "d950a6e79847ca4133707da81f171849e30e4ad5",
  "_id": "garnet@0.1.9",
  "_shasum": "d929ea6c997358f9cec85e7c096a699a44832169",
  "_from": "garnet@>=0.1.8 <0.2.0"
}
